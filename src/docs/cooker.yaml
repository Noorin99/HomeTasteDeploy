paths:
  /api/cooker/{cookerId}/dish:
    post:
      tags:
        - Cooker
      security:
        - authTokenCompleted: []
      summary: Create a new dish for a specific cooker by ID
      parameters:
        - in: path
          name: cookerId
          required: true
          schema:
            type: string
          description: The ID of the cooker to create the dish for
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Pizza Margherita
                description:
                  type: string
                  example: Classic pizza with tomato sauce, mozzarella, and basil
                price:
                  type: number
                  example: 10.0
                image:
                  type: string
                  format: binary
                categories:
                  type: array
                  items:
                    type: string
                    enum:
                      [
                        Pizza,
                        Doner,
                        Çiğ Köfte,
                        Dessert,
                        Turkish,
                        Chicken,
                        Fast Food,
                        Burger,
                        Kumpir,
                        Meat,
                        Italian,
                        Healthy/Diet,
                        Drinks,
                        Far East,
                        Vegan,
                        Keto,
                      ]
                  example: [Pizza, Italian]
                allergies:
                  type: array
                  items:
                    type: string
                    enum:
                      [
                        Dairy,
                        Eggs,
                        Seafood,
                        Gluten,
                        Peanuts,
                        Soy,
                        Sesame,
                        Corn,
                        Meat,
                        Chicken,
                        Potatoes,
                        Rice,
                        Oats,
                        Barley,
                        Rye,
                        Sorghum,
                      ]
                  example: [Gluten, Dairy]
      responses:
        '201':
          description: Dish created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Dish created successfully
                  data:
                    type: object
                    properties:
                      dish:
                        $ref: '#/components/schemas/Food'
        '403':
          description: User is not a cooker
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User is not a cooker
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User not found

  /api/cooker/{cookerId}/dishes:
    get:
      tags:
        - Cooker
      summary: Get the list of dishes associated with a specific cooker by ID
      parameters:
        - in: path
          name: cookerId
          required: true
          schema:
            type: string
          description: The ID of the cooker to get the dishes for
      responses:
        '200':
          description: Dishes retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Dishes retrieved successfully
                  data:
                    type: object
                    properties:
                      dishes:
                        type: array
                        items:
                          $ref: '#/components/schemas/Food'
        '500':
          description: An error occurred while retrieving the dishes
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: An error occurred while retrieving the dishes
                  error:
                    type: object
  /api/cooker/{cookerId}/{dishId}:
    delete:
      tags:
        - Cooker
      security:
        - authTokenCompleted: []
      summary: Delete a specific dish associated with a specific cooker by ID
      parameters:
        - in: path
          name: cookerId
          required: true
          schema:
            type: string
          description: The ID of the cooker to delete the dish for
        - in: path
          name: dishId
          required: true
          schema:
            type: string
          description: The ID of the dish to delete
      responses:
        '200':
          description: Dish deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Dish deleted successfully
        '403':
          description: User is not a cooker
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User is not a cooker
        '404':
          description: Dish not found or user not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Dish not found or user not found
        '500':
          description: An error occurred while deleting the dish.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: An error occurred while deleting the dish.
                  error:
                    type: object
    put:
      tags:
        - Cooker
      security:
        - authTokenCompleted: []
      summary: Update a specific dish associated with a specific cooker by ID
      parameters:
        - in: path
          name: cookerId
          required: true
          schema:
            type: string
          description: The ID of the cooker to update the dish for
        - in: path
          name: dishId
          required: true
          schema:
            type: string
          description: The ID of the dish to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Pizza Margherita
                description:
                  type: string
                  example: Classic pizza with tomato sauce, mozzarella, and basil
                price:
                  type: number
                  example: 10.0
                image:
                  type: string
                  example: https://example.com/pizza.jpg
                categories:
                  type: array
                  items:
                    type: string
                    enum:
                      [
                        Pizza,
                        Doner,
                        Çiğ Köfte,
                        Dessert,
                        Turkish,
                        Chicken,
                        Fast Food,
                        Burger,
                        Kumpir,
                        Meat,
                        Italian,
                        Healthy/Diet,
                        Drinks,
                        Far East,
                        Vegan,
                        Keto,
                      ]
                  example: [Pizza, Italian]
                allergies:
                  type: array
                  items:
                    type: string
                    enum:
                      [
                        Dairy,
                        Eggs,
                        Seafood,
                        Gluten,
                        Peanuts,
                        Soy,
                        Sesame,
                        Corn,
                        Meat,
                        Chicken,
                        Potatoes,
                        Rice,
                        Oats,
                        Barley,
                        Rye,
                        Sorghum,
                      ]
                  example: [Gluten, Dairy]
      responses:
        '200':
          description: Dish updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Dish updated successfully
        '403':
          description: User is not a cooker
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User is not a cooker
        '404':
          description: Dish not found or user not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Dish not found or user not found
        '500':
          description: An error occurred while updating the dish.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: An error occurred while updating the dish.
                  error:
                    type: object
  /api/cooker/orders/changeStatus:
    patch:
      tags:
        - Cooker
      summary: Updates the status of an order
      description: |
        Updates the status of an order that the cooker has received as long as the status isnt "Delivered" or "Canceled". The user must be authenticated with a JWT token to access this endpoint and must have the role of a customer.
      produces:
        - application/json
      parameters:
        - name: orderId
          in: query
          description: The ID of the order to have their status be updated.
          required: true
          type: string
        - name: orderStatus
          in: query
          description: The new status of the order
          required: true
          type: string
      security:
        - authTokenCompleted: []
      responses:
        201:
          description: Order status was successfully updated.
          schema:
            type: object
            properties:
              message:
                type: string
                description: A success message
        400:
          description: Bad Request - The new order status query string was not in the list of valid statuses
          schema:
            type: object
            properties:
              message:
                type: string
                description: An error message
        401:
          description: Unauthenticated - the user isnt authenticated and doesnt have a JWT token
          schema:
            type: object
            properties:
              message:
                type: string
                description: An error message
        403:
          description: Unauthorized, user doesnt have the appropiate role to access this endpoint
          schema:
            type: object
            properties:
              message:
                type: string
                description: An error message
        404:
          description: Not Found - the order wasnt found or order status was "Canceled" or "Delivered"
          schema:
            type: object
            properties:
              message:
                type: string
                description: An error message
        500:
          description: Interal Server Error - this might include any error
          schema:
            type: object
            properties:
              message:
                type: string
                description: An error message
